name: Deploy to EKS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: 954976299895.dkr.ecr.us-east-1.amazonaws.com/webdev77
  EKS_CLUSTER: webdev77
  KUBE_NAMESPACE: default
  APP_ENV: prod

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push Docker image
      env:
        DB_HOST: ${{ secrets.DB_HOST }}
      run: |
        docker build --build-arg DB_HOST=$DB_HOST -t $ECR_REPOSITORY:$GITHUB_SHA .
        docker push $ECR_REPOSITORY:$GITHUB_SHA

    - name: Configure kubectl
      uses: azure/setup-kubectl@v3

    - name: Deploy to EKS
      env:
        DATABASE_URL: "mysql://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@${{ secrets.DB_HOST }}:3306/${{ secrets.DB_NAME }}?serverVersion=8.0"
      run: |
        kubectl config set-context --current --namespace=$KUBE_NAMESPACE
        
        # Create secrets
        kubectl create secret generic symfony-secrets \
          --from-literal=APP_SECRET='${{ secrets.APP_SECRET }}' \
          --from-literal=DATABASE_URL='$DATABASE_URL' \
          --dry-run=client -o yaml | kubectl apply -f -
        
        # Apply configurations
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml
        
        # Verify
        kubectl rollout status deployment/symfony-app --timeout=300s