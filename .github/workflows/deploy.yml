name: Build and Deploy to EKS

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggers

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: 954976299895.dkr.ecr.us-east-1.amazonaws.com/webdev77
  EKS_CLUSTER: webdev77  # Must match exact cluster name
  KUBE_NAMESPACE: default
  APP_ENV: prod

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # Required for AWS IAM OIDC auth
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push Docker image
      id: build-image
      run: |
        # Use BuildKit for faster builds
        DOCKER_BUILDKIT=1 docker build \
          --build-arg APP_ENV=${{ env.APP_ENV }} \
          -t ${{ env.ECR_REPOSITORY }}:${{ github.sha }} \
          -t ${{ env.ECR_REPOSITORY }}:latest \
          .
        docker push ${{ env.ECR_REPOSITORY }}:${{ github.sha }}
        docker push ${{ env.ECR_REPOSITORY }}:latest
        echo "image=${{ env.ECR_REPOSITORY }}:${{ github.sha }}" >> $GITHUB_OUTPUT

    - name: Install kubectl and aws-iam-authenticator
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'  # Always use latest kubectl

    - name: Configure EKS access
      run: |
        aws eks update-kubeconfig \
          --region ${{ env.AWS_REGION }} \
          --name ${{ env.EKS_CLUSTER }}

    - name: Deploy to Kubernetes
      run: |
        # Set namespace context
        kubectl config set-context --current --namespace=${{ env.KUBE_NAMESPACE }}
        
        # Apply configuration (idempotent)
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/secret.yaml
        
        # Create deployment if missing
        kubectl apply -f k8s/deployment.yaml || echo "Deployment already exists"
        
        # Update image
        kubectl set image deployment/symfony-app \
          symfony=${{ steps.build-image.outputs.image }}
        
        # Apply service
        kubectl apply -f k8s/service.yaml
        
        # Verify rollout
        kubectl rollout status deployment/symfony-app --timeout=180s
        
        # Optional: Restart if config changed
        kubectl rollout restart deployment/symfony-app

    - name: Verify deployment
      run: |
        kubectl get deployments -n ${{ env.KUBE_NAMESPACE }}
        kubectl get pods -n ${{ env.KUBE_NAMESPACE }}
        kubectl get service symfony-service -n ${{ env.KUBE_NAMESPACE }}